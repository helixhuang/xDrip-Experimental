buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
    maven {
        url "https://raw.github.com/embarkmobile/zxing-android-minimal/mvn-repo/maven-repository/"
    }
    maven {
        url "https://jitpack.io"
    }
    maven { url "https://oss.sonatype.org/content/groups/public/" }
}

def generateVersionName = { ->

    StringBuilder stringBuilder = new StringBuilder();
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--always'
            standardOutput = stdout
        }
        String commitObject =  stdout.toString().trim()
        try {
            stdout = new ByteArrayOutputStream()
            exec {
                commandLine 'git', 'describe', '--tags'
                standardOutput = stdout
            }
            stringBuilder.append(stdout.toString().trim())
            stringBuilder.append("-")
        } catch (ignored) {
            // no tags
        }

        stringBuilder.append(commitObject)
        stdout = new ByteArrayOutputStream()
        exec {
           commandLine 'git', 'rev-parse', '--show-toplevel'
            standardOutput = stdout
        }
        if(stdout.toString().trim().contains("xDrip-Experimental")) {
            stringBuilder.append("-experimental")
        }

        stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git',  'rev-parse', '--abbrev-ref', 'HEAD'
            standardOutput = stdout
        }
        String branch = stdout.toString().trim()
        if(!branch.equals("master")) {
            stringBuilder.append('-')
            stringBuilder.append(branch)
        }

    } catch (ignored) {
        return "NoGitSystemAvailable";
    }
    stringBuilder.append('-')
    stringBuilder.append((new Date()).format('yyyy.MM.dd'))
    return stringBuilder.toString()

}



android {
    compileSdkVersion 23
    buildToolsVersion "22.0.1"
    defaultConfig {
        applicationId "com.eveningoutpost.dexdrip"
        minSdkVersion 17
        targetSdkVersion 23
        versionCode 2
        versionName generateVersionName()
        multiDexEnabled true
    }

    productFlavors {
        xdrip {
            applicationId = "com.eveningoutpost.dexdrip"
            resValue "string", "content_provider", "com.example"
            resValue "string", "app_name", "xDrip"
            resValue "string", "target_package", "com.eveningoutpost.dexdrip"
            resValue "string", "data_sync", "Data Sync"
        }
        xdripviewer {
            applicationId = "com.eveningoutpost.dexdrip.viewer"
            resValue "string", "content_provider", "com.example1"
            resValue "string", "app_name", "xDripViewer"
            resValue "string", "target_package", "com.eveningoutpost.dexdrip.viewer"
            resValue "string", "data_sync", ""
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    xdripWearApp project(path: ':wear', configuration: 'xdripRelease')
    xdripviewerWearApp project(path: ':wear', configuration: 'xdripviewerRelease')
    testCompile 'com.squareup.okhttp:mockwebserver:2.6.0'
    compile 'com.nispok:snackbar:2.10.8'
    compile 'com.android.support:appcompat-v7:23.1.0'
    compile 'com.squareup.okhttp:okhttp:2.6.0'
    compile 'com.google.code.gson:gson:2.3'
    compile 'com.squareup.retrofit:converter-gson:2.0.0-beta2'
    compile 'com.squareup.retrofit:retrofit:2.0.0-beta2'
    compile 'com.squareup.okhttp:logging-interceptor:2.6.0'
    compile 'com.getpebble:pebblekit:3.0.0'
    compile 'io.reactivex:rxjava:1.0.0'
    compile 'com.github.lecho:hellocharts-android:v1.5.5'
    compile 'com.google.android.gms:play-services-wearable:7.5.0'
    compile 'com.google.guava:guava:18.0'
    compile 'com.android.support:multidex:1.0.1'
    compile('com.github.nightscout:android-uploader:CORE_FOR_XDRIP') {
        transitive = false;
    }
    /* begin relevant android-uploader dependencies */
    compile 'com.embarkmobile:zxing-android-minimal:2.0.0@aar'
    compile 'com.embarkmobile:zxing-android-legacy:2.0.0@aar'
    compile 'com.embarkmobile:zxing-android-integration:2.0.0@aar'
    compile 'com.google.zxing:core:3.1.0'
    compile 'net.tribe7.seeds:seeds-functional:16.0.1'
    compile 'net.tribe7.seeds:seeds-primitives:16.0.1'
    compile 'org.slf4j:slf4j-api:1.7.7'
    /* end relevant android-uploader dependencies */
    compile('com.crashlytics.sdk.android:crashlytics:2.5.0@aar') {
        transitive = true;
    }
}
